type Config = {
    key: string | null;
    version: string;
    sourcemapVersion: string;
    stage: string;
    maxGlowsPerReport: number;
    reportBrowserExtensionErrors: boolean;
    reportingUrl: string;
    debug: boolean;
    beforeEvaluate: (error: Error) => Error | false | null | Promise<Error | false | null>;
    beforeSubmit: (report: Report) => Report | false | null | Promise<Report | false | null>;
};
type Report = {
    notifier: string;
    exception_class: string;
    seen_at: number;
    message: string;
    language: 'javascript';
    glows: Glow[];
    context: Context;
    stacktrace: StackFrame[];
    sourcemap_version_id: string;
    solutions: Solution[];
    stage?: string;
};
interface SolutionProviderExtraParameters {
}
type SolutionProvider = {
    canSolve: (error: Error, extraParameters?: SolutionProviderExtraParameters) => boolean | Promise<boolean>;
    getSolutions: (error: Error, extraParameters?: SolutionProviderExtraParameters) => Solution[] | Promise<Solution[]>;
};
type Solution = {
    class: string;
    title: string;
    description: string;
    links: {
        [label: string]: string;
    };
    action_description?: string;
    is_runnable?: boolean;
};
type Context = {
    request?: {
        url?: String;
        useragent?: String;
        referrer?: String;
        readyState?: String;
    };
    request_data?: {
        queryString: {
            [key: string]: string;
        };
    };
    cookies?: {
        [key: string]: string;
    };
    [key: string]: any;
};
type StackFrame = {
    line_number: number;
    column_number: number;
    method: string;
    file: string;
    code_snippet: {
        [key: number]: string;
    };
    trimmed_column_number: number | null;
    class: string;
};
type Glow = {
    time: number;
    microtime: number;
    name: String;
    message_level: MessageLevel;
    meta_data: object | object[];
};
type MessageLevel = 'info' | 'debug' | 'warning' | 'error' | 'critical';

declare class Api {
    report(report: Report, url: string, key: string | null, reportBrowserExtensionErrors: boolean): Promise<void>;
}

declare class Flare {
    api: Api;
    config: Config;
    glows: Glow[];
    context: Context;
    solutionProviders: SolutionProvider[];
    constructor(api?: Api);
    light(key?: string, debug?: boolean): Flare;
    configure(config: Partial<Config>): Flare;
    test(): Promise<void>;
    glow(name: string, level?: MessageLevel, data?: object | object[]): Flare;
    clearGlows(): Flare;
    addContext(name: string, value: any): Flare;
    addContextGroup(groupName: string, value: object): Flare;
    registerSolutionProvider(solutionProvider: SolutionProvider): Flare;
    report(error: Error, context?: Context, extraSolutionParameters?: SolutionProviderExtraParameters): Promise<void>;
    reportMessage(message: string, context?: Context, exceptionClass?: string): Promise<void>;
    createReportFromError(error: Error, context?: Context, extraSolutionParameters?: SolutionProviderExtraParameters): Promise<Report | false>;
    sendReport(report: Report): Promise<void>;
    set beforeEvaluate(beforeEvaluate: Config['beforeEvaluate']);
    set beforeSubmit(beforeSubmit: Config['beforeSubmit']);
    set stage(stage: string | undefined);
}

declare const flare: Flare;

export { Flare, flare };
